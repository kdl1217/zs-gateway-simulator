buildscript {

    ext {
        lombokVersion = "4.1.6"
        dependencyManagementVersion = "1.0.9.RELEASE"
        springBootVersion = "2.2.6.RELEASE"
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.aliyun.com/repository/public" }
    }

    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:$lombokVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$dependencyManagementVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}


allprojects {
    group 'com.incarcloud'
    version '1.0-SNAPSHOT'

    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
        maven { url "https://repository.incarcloud.com/content/groups/public" }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"
        }

        dependencies {
            dependency "com.incarcloud:boar-datapack-ic:1.3-SNAPSHOT"

            dependency "com.alibaba:fastjson:1.2.68"
            dependency "com.alibaba:druid-spring-boot-starter:1.1.22"

            dependency "org.apache.commons:commons-lang3:3.10"
        }
    }
}

subprojects {
    apply plugin: "checkstyle"
    apply plugin: "io.freefair.lombok"

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }

        all {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        }
    }

    compileJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    compileTestJava {
        options.encoding = "UTF-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.java.srcDirs
        classifier "sources"
    }

    task checkstyle(type: Checkstyle) {
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures true
        showViolations true
        source = fileTree("src")
        include "**/*.java"
        exclude "**/test/**"
        exclude "**/build/**"
        classpath = files()
    }

    test {
        useJUnitPlatform()
    }

    task removeLombokConfig() {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    defaultTasks "assemble"
}

